// Generated by CoffeeScript 1.6.2
(function() {
  var __hasProp = {}.hasOwnProperty;

  window.EarthwormJim = function() {
    var Model, View, appender, notifier, override, publisher, renderer, setter;

    publisher = function() {
      return function(eventName) {
        var s, _i, _len, _ref;

        _ref = this.subscribers;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          s = _ref[_i];
          s.notify(eventName);
        }
        return this;
      };
    };
    setter = function(attrName) {
      return function(value) {
        if (this.attributes[attrName] !== value) {
          this.attributes[attrName] = value;
          this.publish("change:" + attrName);
        }
        return this;
      };
    };
    override = function(preferences, defaults) {
      var key, value;

      for (key in preferences) {
        if (!__hasProp.call(preferences, key)) continue;
        value = preferences[key];
        defaults[key] = value;
      }
      return defaults;
    };
    Model = function(model) {
      var defaults;

      defaults = {
        attributes: {},
        publish: publisher(),
        subscribers: []
      };
      return override(defaults, model);
    };
    notifier = function() {
      return function(event) {
        var handler;

        handler = this[this.handlers[event]];
        if (handler) {
          handler.call(this);
        }
        return this;
      };
    };
    renderer = function(getHTML) {
      return function() {
        this.$el = $(getHTML());
        if (!this.appended) {
          this.container.append(this.$el);
          this.appended = true;
          this.notify("after:render");
        }
        return this;
      };
    };
    appender = function() {
      return function(el) {
        this.container = $(el);
        return this;
      };
    };
    View = function(view) {
      var _ref, _ref1, _ref2;

      view.$el = $(view.el);
      if ((_ref = view.model) != null) {
        _ref.subscribers.push(view);
      }
      if ((_ref1 = view.notify) == null) {
        view.notify = notifier();
      }
      view.render = renderer(view.render);
      if ((_ref2 = view.appendTo) == null) {
        view.appendTo = appender();
      }
      return view;
    };
    return {
      View: View,
      Model: Model,
      setter: setter
    };
  };

}).call(this);
