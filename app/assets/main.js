// Generated by CoffeeScript 1.6.2
(function() {
  var EWJ, GridController, PixelModel, PixelView;

  EWJ = EarthwormJim();

  PixelModel = function(model) {
    return EWJ.Model({
      attributes: model.attributes,
      setColor: EWJ.setter("color")
    });
  };

  PixelView = function(view) {
    return EWJ.View({
      model: view.model,
      handlers: {
        "change:color": "updateColor",
        "after:render": "updateColor"
      },
      updateColor: function() {
        return this.$el.css('background-color', this.model.attributes.color);
      },
      render: function() {
        return "<div class='pixel'></div>";
      }
    });
  };

  GridController = function(height, width, options) {
    var $el, ZOOM, getMouseCoords, handler, handlerKey, mousedown, pixelModels, pm, pv, x, y, _ref;

    $el = $(options.el);
    mousedown = false;
    ZOOM = 20;
    $el.css('max-height', height * ZOOM);
    $el.css('max-width', width * ZOOM);
    pixelModels = (function() {
      var _i, _results;

      _results = [];
      for (y = _i = 1; 1 <= height ? _i <= height : _i >= height; y = 1 <= height ? ++_i : --_i) {
        _results.push((function() {
          var _j, _results1;

          _results1 = [];
          for (x = _j = 1; 1 <= width ? _j <= width : _j >= width; x = 1 <= width ? ++_j : --_j) {
            pm = PixelModel({
              attributes: {
                color: 'white'
              }
            });
            pv = PixelView({
              model: pm
            });
            pv.appendTo($el);
            pv.render();
            _results1.push(pm);
          }
          return _results1;
        })());
      }
      return _results;
    })();
    getMouseCoords = function(e, $el) {
      return [e.pageX - $el.position().left, e.pageY - $el.position().top];
    };
    _ref = options.handlers;
    for (handlerKey in _ref) {
      handler = _ref[handlerKey];
      if (typeof $el[handlerKey] === "function") {
        $el[handlerKey](function(e) {
          var _ref1;

          _ref1 = getMouseCoords(e, $el), x = _ref1[0], y = _ref1[1];
          pm = pixelModels[Math.floor(y / ZOOM)][Math.floor(x / ZOOM)];
          return handler.call(pm, e);
        });
      }
    }
    return {};
  };

  $(document).ready(function() {
    return GridController(24, 24, {
      el: '#DrawingCanvas',
      handlers: {
        mousedrag: function() {
          return this.setColor('black');
        }
      }
    });
  });

}).call(this);
